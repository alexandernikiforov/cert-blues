/*
 * MIT License
 *
 * Copyright (c) 2020, 2021 Alexander Nikiforov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

plugins {
    id 'java'
    id 'project-java-conventions'
    id 'org.unbroken-dome.test-sets'
    id 'com.microsoft.azure.azurefunctions' version '1.8.2'
}

testSets {
    integrationTest
}

integrationTest {
    useJUnitPlatform()
}

dependencies {
    // provided by the worker on the classpath
    compileOnly 'com.microsoft.azure.functions:azure-functions-java-library'

    compileOnly 'com.google.auto.value:auto-value-annotations'
    annotationProcessor 'com.google.auto.value:auto-value'

    compileOnly 'org.jetbrains:annotations'

    implementation(group: 'com.google.guava', name: 'guava') {
        transitive = false
    }

    implementation 'com.azure:azure-identity'

    implementation project(':cert-blues-acme')
    implementation project(':cert-blues-storage')
    implementation project(':cert-blues-azure')

    runtimeOnly 'ch.qos.logback:logback-classic'

    testImplementation project(':cert-blues-test-common')
}

azurefunctions {
    appName = 'cert-blues'
    allowTelemetry = false
}

task startFunc(type: Exec) {
    dependsOn assemble, azureFunctionsPackage

    workingDir = "${project.buildDir}/azure-functions/${azurefunctions['appName']}" as String
    commandLine 'C:\\Program Files\\Microsoft\\Azure Functions Core Tools\\func.exe', 'start', '--verbose'
}

azureFunctionsPackage.shouldRunAfter assemble
